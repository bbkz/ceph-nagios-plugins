#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Copyright (c) 2013 SWITCH http://www.switch.ch
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

import argparse
import os
import subprocess
import sys
import logging
import json

__version__ = '1.7.0'

# default ceph values
CEPH_COMMAND = '/usr/bin/ceph'

# nagios exit code
STATUS_OK = 0
STATUS_WARNING = 1
STATUS_ERROR = 2
STATUS_UNKNOWN = 3

def main():

    # parse args
    parser = argparse.ArgumentParser(description="'ceph df' nagios plugin.")
    parser.add_argument('-e','--exe', help='ceph executable [%s]' % CEPH_COMMAND)
    parser.add_argument('-c','--conf', help='alternative ceph conf file')
    parser.add_argument('-m','--monaddress', help='ceph monitor address[:port]')
    parser.add_argument('-i','--id', help='ceph client id')
    parser.add_argument('-n','--name', help='ceph client name')
    parser.add_argument('-k','--keyring', help='ceph client keyring file')
    parser.add_argument('-p','--pool', help='ceph pool name')
    parser.add_argument('-d','--detail', help="show pool details on warn and critical", action='store_true')
    parser.add_argument('-W','--warn', help="warn above this percent RAW USED", type=float)
    parser.add_argument('-C','--critical', help="critical alert above this percent RAW USED", type=float)
    parser.add_argument('-V','--version', help='show version and exit', action='store_true')
    parser.add_argument("-z", "--debug", help="show debug informations", default=False, action="store_true", dest="show_debug")
    args = parser.parse_args()

    # validate args
    if args.version:
        print('version %s' % __version__)
        return STATUS_OK

    if args.show_debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
        logging.getLogger('requests').setLevel(logging.CRITICAL)

    ceph_exec = args.exe if args.exe else CEPH_COMMAND
    if not os.path.exists(ceph_exec):
        logging.error("[-] ceph executable '%s' doesn't exist" % ceph_exec)
        return STATUS_UNKNOWN

    if args.conf and not os.path.exists(args.conf):
        logging.error("[-] ceph conf file '%s' doesn't exist" % args.conf)
        return STATUS_UNKNOWN

    if args.keyring and not os.path.exists(args.keyring):
        logging.error("[-] keyring file '%s' doesn't exist" % args.keyring)
        return STATUS_UNKNOWN

    if args.warn > args.critical or not args.warn or not args.critical:
        logging.error("[-] warn and critical level must be set and critical must be greater than warn")
        return STATUS_UNKNOWN

    # build command
    ceph_df = [ceph_exec]
    if args.monaddress:
        ceph_df.append('-m')
        ceph_df.append(args.monaddress)
    if args.conf:
        ceph_df.append('-c')
        ceph_df.append(args.conf)
    if args.id:
        ceph_df.append('--id')
        ceph_df.append(args.id)
    if args.name:
        ceph_df.append('--name')
        ceph_df.append(args.name)
    if args.keyring:
        ceph_df.append('--keyring')
        ceph_df.append(args.keyring)
    ceph_df.append('df')
    ceph_df.append('-f')
    ceph_df.append('json')

    # exec command
    p = subprocess.Popen(ceph_df, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = p.communicate()
    logging.debug("[*] exec output: " + output)

    if p.returncode != 0:
        # read only first line of error
        one_line = err.split('\n')[0]
        if '-1 ' in one_line:
            idx = one_line.rfind('-1 ')
            logging.error("[-] %s: %s % (ceph_exec, one_line[idx+len('-1 '):]")
        else:
            logging.error("[-] " + one_line)
        return STATUS_UNKNOWN

    # parse output
    if output:
        output = json.loads(output)
        logging.debug("[*] output dict: " + str(output))

        # parse pool values
        if args.pool:
            for pool in output.get("pools"):
                if pool.get("name") == args.pool:
                    logging.debug("[*] pool dict: " + str(pool))
                    pool_used = "{0:.2f} GiB".format(round(pool["stats"].get("bytes_used") / 1073741824, 2)) # in GiB (i guess it is already rounded by ceph)
                    pool_usage_percent = round(pool["stats"].get("percent_used") * 100, 2)
                    #pool_available_space = pool.get("max_avail")
                    #pool_objects = pool.get("objects")

                    if pool_usage_percent > args.critical:
                        print('CRITICAL: %s%% usage in Pool \'%s\' is above %s%% (%s used) | Usage=%s%%;%s;%s;;' % (pool_usage_percent, args.pool, args.critical, pool_used, pool_usage_percent, args.warn, args.critical))
                        return STATUS_ERROR
                    if pool_usage_percent > args.warn:
                        print('WARNING: %s%% usage in Pool \'%s\' is above %s%% (%s used) | Usage=%s%%;%s;%s;;' % (pool_usage_percent, args.pool, args.warn, pool_used, pool_usage_percent, args.warn, args.critical))
                        return STATUS_WARNING
                    else:
                        print('%s%% usage in Pool \'%s\' | Usage=%s%%;%s;%s;;' % (pool_usage_percent, args.pool, pool_usage_percent, args.warn, args.critical))
                        return STATUS_OK

        else: # if args.pool
            global_usage_percent = round(output["stats"].get("total_used_raw_ratio") * 100, 2)
            global_available_space = "{0:.2f} GiB".format(round(output["stats"].get("total_avail_bytes") / 1073741824, 2))
            global_total_space = "{0:.2f} GiB".format(round(output["stats"].get("total_bytes") / 1073741824, 2))

            poolout = ''
            if args.detail:
                for pool in output.get("pools"):
                    poolout = poolout + "\n\n{0:24}::\t{1}".format("name", pool.get("name"))
                    poolout = poolout + "\n{0:24}::\t{1}".format("id", pool.get("id"))
                    for stats in pool["stats"].items():
                        poolout = poolout + "\n" + "{0:24}::\t{1}".format(stats[0], stats[1])

            if global_usage_percent > args.critical:
                print('CRITICAL: global RAW usage of %s%% is above %s%% (%s of %s free)%s | Usage=%s%%;%s;%s;;' % (global_usage_percent, args.critical, global_available_space, global_total_space, poolout, global_usage_percent, args.warn, args.critical))
                return STATUS_ERROR
            elif global_usage_percent > args.warn:
                print('WARNING: global RAW usage of %s%% is above %s%% (%s of %s free)%s | Usage=%s%%;%s;%s;;' % (global_usage_percent, args.warn, global_available_space, global_total_space, poolout, global_usage_percent, args.warn, args.critical))
                return STATUS_WARNING
            else:
                print('RAW usage %s%% | Usage=%s%%;%s;%s;;' % (global_usage_percent, global_usage_percent, args.warn, args.critical))
                return STATUS_OK

    return STATUS_UNKNOWN

if __name__ == "__main__":
    sys.exit(main())
